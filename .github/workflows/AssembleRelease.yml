# This is a basic workflow to help you get started with Actions

name: Binary Release x86 (Windows,Linux)

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  release:
    types: [ published ]
  tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  QT_VERSION: 5.12.10
  ARCH_VERSION: win64_mingw73
  TOOL_VERSION: tools_mingw,7.3.0-1-202004170606,qt.tools.win64_mingw730

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.10'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw73'
          install-deps: 'true'
          cached: 'false'
          setup-python: 'true'
          tools: 'tools_mingw,7.3.0-1-202004170606,qt.tools.win64_mingw730 tools_ifw,4.0,qt.tools.ifw.40 tools_qtcreator,4.13.2-0,qt.tools.qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==0.11.1'
          py7zrversion: '==0.11.3'
          extra: '--external 7z'

      # Runs a single command using the runners shell
      - name: Install CQtDeployer
        run: |
          git clone https://github.com/QuasarApp/CQtDeployer.git
          cd CQtDeployer
          git submodule update --init --recursive
          qmake -r
          call "%iqta_tools%/mingw730_64/bin/mingw32-make" -j8
          call "%iqta_tools%/mingw730_64/bin/mingw32-make" deploy
          dir
        shell: cmd
      - name: Run QMake
        run: |
          cd ./
          qmake IntersectionRoadSimulationandVisualization.pro
          dir
        shell: cmd
      - name: Build With CMake
        run: |
          call dir "%iqta_tools%"
          call "%iqta_tools%/mingw730_64/bin/mingw32-make"
        shell: cmd
      - name: Clean With CMake
        run: call "%iqta_tools%/mingw730_64/bin/mingw32-make" clean
        shell: cmd
      - name: Build Release and Packaging
        run: |
          cd release
          windeployqt --quick --no-translations .
        shell: powershell
      - name: Zip release folder
        uses: papeloto/action-zip@v1
        with:
          files:
            release/
          dest: windowsx86_64_Portable.zip
      - uses: actions/upload-artifact@v1
        with:
          name: windowsx86_64_Portable
          path: ${{ github.workspace }}/windowsx86_64_Portable.zip
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./windowsx86_64_Portable.zip
          asset_name: windowsx86_64_Portable.zip
          asset_content_type: application/zip


